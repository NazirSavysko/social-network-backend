{
	"info": {
		"_postman_id": "1936dc23-9d08-47c2-a269-1d783c80dab0",
		"name": "Social Network API Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43684456"
	},
	"item": [
		{
			"name": "updateMessageByIdWithoutProblems",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'id'\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData.id).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'content'\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"content\");\r",
							"    pm.expect(jsonData.content).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'sender' and 'receiver'\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"sender\");\r",
							"    pm.expect(jsonData).to.have.property(\"receiver\");\r",
							"});\r",
							"\r",
							"pm.test(\"'sender' and 'receiver' contain all required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    [\"sender\", \"receiver\"].forEach(role => {\r",
							"        const user = jsonData[role];\r",
							"        pm.expect(user).to.have.property(\"id\");\r",
							"        pm.expect(user).to.have.property(\"name\");\r",
							"        pm.expect(user).to.have.property(\"surname\");\r",
							"        pm.expect(user).to.have.property(\"email\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"content\": \"sdfsdfdsfsd\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{globalUrl}}messages/{{correctlMessageId}}/update",
					"host": [
						"{{globalUrl}}messages"
					],
					"path": [
						"{{correctlMessageId}}",
						"update"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateMessageByIdWithIdProblems",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains timestamp, status, error, and path\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData).to.have.property(\"status\");\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData).to.have.property(\"path\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error code is 404\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is 'Not Found'\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.eql(\"Not Found\");\r",
							"});\r",
							"\r",
							"pm.test(\"Request path is correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.path).to.eql(\"/api/v1/messages/-1/update\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"content\": \"sdfsdfdsfsd\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{globalUrl}}messages/{{incorrectlMessageId}}/update",
					"host": [
						"{{globalUrl}}messages"
					],
					"path": [
						"{{incorrectlMessageId}}",
						"update"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateMessageByIdWithBodyProblems",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400 Bad Request\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is plain text\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains validation message\", function () {\r",
							"    const body = pm.response.text();\r",
							"    pm.expect(body).to.include(\"Content must not be blank\");\r",
							"    pm.expect(body).to.include(\"Validation errors occurred\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"content\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{globalUrl}}messages/{{correctUserId}}/update",
					"host": [
						"{{globalUrl}}messages"
					],
					"path": [
						"{{correctUserId}}",
						"update"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteMessageById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200 Ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{globalUrl}}messages/{{correctlMessageId}}/delete",
					"host": [
						"{{globalUrl}}messages"
					],
					"path": [
						"{{correctlMessageId}}",
						"delete"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteMessageByIdWithIdProblem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is in JSON format\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(contentType).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains all required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData).to.have.property(\"status\");\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData).to.have.property(\"path\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{globalUrl}}messages/{{incorrectlMessageId}}/delete",
					"host": [
						"{{globalUrl}}messages"
					],
					"path": [
						"{{incorrectlMessageId}}",
						"delete"
					]
				}
			},
			"response": []
		},
		{
			"name": "getMessageByIdWithIdProblem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is in JSON format\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(contentType).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains all required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData).to.have.property(\"status\");\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData).to.have.property(\"path\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{globalUrl}}messages/{{incorrectlMessageId}}",
					"host": [
						"{{globalUrl}}messages"
					],
					"path": [
						"{{incorrectlMessageId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "getMessagesByUserIdWithUserIdProblem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is in JSON format\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(contentType).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains all required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData).to.have.property(\"status\");\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData).to.have.property(\"path\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{globalUrl}}messages/{{incorrectUserId}}",
					"host": [
						"{{globalUrl}}messages"
					],
					"path": [
						"{{incorrectUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "getMessagesByUserIdWithoutProblems",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'id' and 'content'\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"content\");\r",
							"    pm.expect(jsonData.id).to.eql(1);\r",
							"    pm.expect(jsonData.content).to.eql(null); // explicitly checking for null\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'sender' and 'receiver' with all required fields set to null\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    [\"sender\", \"receiver\"].forEach(role => {\r",
							"        const user = jsonData[role];\r",
							"        pm.expect(user).to.have.property(\"id\");\r",
							"        pm.expect(user).to.have.property(\"name\");\r",
							"        pm.expect(user).to.have.property(\"surname\");\r",
							"        pm.expect(user).to.have.property(\"email\");\r",
							"\r",
							"        pm.expect(user.id).to.eql(null);\r",
							"        pm.expect(user.name).to.eql(null);\r",
							"        pm.expect(user.surname).to.eql(null);\r",
							"        pm.expect(user.email).to.eql(null);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{globalUrl}}messages/{{correctUserId}}",
					"host": [
						"{{globalUrl}}messages"
					],
					"path": [
						"{{correctUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "getMessageByIdWithoutProblems",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'id' and 'content'\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"content\");\r",
							"    pm.expect(jsonData.id).to.eql(1);\r",
							"    pm.expect(jsonData.content).to.eql(null); // explicitly checking for null\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'sender' and 'receiver' with all required fields set to null\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    [\"sender\", \"receiver\"].forEach(role => {\r",
							"        const user = jsonData[role];\r",
							"        pm.expect(user).to.have.property(\"id\");\r",
							"        pm.expect(user).to.have.property(\"name\");\r",
							"        pm.expect(user).to.have.property(\"surname\");\r",
							"        pm.expect(user).to.have.property(\"email\");\r",
							"\r",
							"        pm.expect(user.id).to.eql(null);\r",
							"        pm.expect(user.name).to.eql(null);\r",
							"        pm.expect(user.surname).to.eql(null);\r",
							"        pm.expect(user.email).to.eql(null);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{globalUrl}}messages/{{correctlMessageId}}",
					"host": [
						"{{globalUrl}}messages"
					],
					"path": [
						"{{correctlMessageId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "createMessageWithoutProblems",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 201 created\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'id' and 'content'\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData.id).to.eql(1);\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"content\");\r",
							"    pm.expect(jsonData.content).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.content).to.eql(\"1\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'sender' and 'receiver'\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"sender\");\r",
							"    pm.expect(jsonData).to.have.property(\"receiver\");\r",
							"});\r",
							"\r",
							"pm.test(\"Sender and receiver have correct 'id' and other fields as null\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    const sender = jsonData.sender;\r",
							"    pm.expect(sender.id).to.eql(1);\r",
							"    pm.expect(sender.name).to.eql(null);\r",
							"    pm.expect(sender.surname).to.eql(null);\r",
							"    pm.expect(sender.email).to.eql(null);\r",
							"\r",
							"    const receiver = jsonData.receiver;\r",
							"    pm.expect(receiver.id).to.eql(2);\r",
							"    pm.expect(receiver.name).to.eql(null);\r",
							"    pm.expect(receiver.surname).to.eql(null);\r",
							"    pm.expect(receiver.email).to.eql(null);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"content\": \"1\",\r\n  \"senderId\": 1,\r\n  \"receiverId\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{globalUrl}}messages/create",
					"host": [
						"{{globalUrl}}messages"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "createMessageWithBodyProblem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400 Bad Request\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is text/plain\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(contentType).to.include(\"text/plain\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains all validation error messages\", function () {\r",
							"    const body = pm.response.text();\r",
							"\r",
							"    pm.expect(body).to.include(\"Validation errors occurred\");\r",
							"    pm.expect(body).to.include(\"Sender ID must not be null\");\r",
							"    pm.expect(body).to.include(\"Content must not be blank\");\r",
							"    pm.expect(body).to.include(\"Receiver ID must not be null\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"content\": \"\",\r\n  \"senderId\": \"\",\r\n  \"receiverId\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{globalUrl}}messages/create",
					"host": [
						"{{globalUrl}}messages"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateUserByIdWithoutProblems",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400 Bad Request\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is text/plain\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(contentType).to.include(\"text/plain\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains all validation error messages\", function () {\r",
							"    const body = pm.response.text();\r",
							"\r",
							"    pm.expect(body).to.include(\"Validation errors occurred\");\r",
							"    pm.expect(body).to.include(\"Email must not be blank\");\r",
							"    pm.expect(body).to.include(\"Surname must not be blank\");\r",
							"    pm.expect(body).to.include(\"Password must not be blank\");\r",
							"    pm.expect(body).to.include(\"Name must not be blank\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"content\": \"sdfsdfdsfsd\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{globalUrl}}users/{{correctUserId}}/update",
					"host": [
						"{{globalUrl}}users"
					],
					"path": [
						"{{correctUserId}}",
						"update"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateUserByIdWithIdProblems",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains timestamp, status, error, and path\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData).to.have.property(\"status\");\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData).to.have.property(\"path\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error code is 404\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is 'Not Found'\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.eql(\"Not Found\");\r",
							"});\r",
							"\r",
							"pm.test(\"Request path is correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.path).to.eql(\"/api/v1/users/-1/update\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"content\": \"sdfsdfdsfsd\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{globalUrl}}users/{{incorrectUserId}}/update",
					"host": [
						"{{globalUrl}}users"
					],
					"path": [
						"{{incorrectUserId}}",
						"update"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateMessageByIdWithBodyProblems",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400 Bad Request\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is text/plain\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(contentType).to.include(\"text/plain\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains all expected validation error messages\", function () {\r",
							"    const body = pm.response.text();\r",
							"\r",
							"    pm.expect(body).to.include(\"Validation errors occurred\");\r",
							"\r",
							"    pm.expect(body).to.include(\"Email must not be blank\");\r",
							"    pm.expect(body).to.include(\"Password must not be blank\");\r",
							"    pm.expect(body).to.include(\"Name must not be blank\");\r",
							"    pm.expect(body).to.include(\"Name must be between 4 and 20 characters long\");\r",
							"    pm.expect(body).to.include(\"{users.update.update.email_is_invalid}\"); // raw key returned\r",
							"    pm.expect(body).to.include(\"Surname must not be blank\");\r",
							"    pm.expect(body).to.include(\"Surname must be between 4 and 30 characters long\");\r",
							"    pm.expect(body).to.include(\"Password must be between 8 and 30 characters long\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": \"\",\r\n  \"name\": \"\",\r\n  \"surname\": \"\",\r\n  \"email\": \"\",\r\n  \"password\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{globalUrl}}users/{{correctUserId}}/update",
					"host": [
						"{{globalUrl}}users"
					],
					"path": [
						"{{correctUserId}}",
						"update"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteUserByIdWithoutProblems",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200 Ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{globalUrl}}users/{{correctUserId}}/delete",
					"host": [
						"{{globalUrl}}users"
					],
					"path": [
						"{{correctUserId}}",
						"delete"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteUserByIdWithIdProblem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(contentType).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains all required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData).to.have.property(\"status\", 404);\r",
							"    pm.expect(jsonData).to.have.property(\"error\", \"Not Found\");\r",
							"    pm.expect(jsonData).to.have.property(\"path\", \"/api/v1/messages/-1/delete\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{globalUrl}}messages/{{incorrectUserId}}/delete",
					"host": [
						"{{globalUrl}}messages"
					],
					"path": [
						"{{incorrectUserId}}",
						"delete"
					]
				}
			},
			"response": []
		},
		{
			"name": "getUserByIdWithIdProblem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(contentType).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains all required fields with correct values\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData).to.have.property(\"status\", 404);\r",
							"    pm.expect(jsonData).to.have.property(\"error\", \"Not Found\");\r",
							"    pm.expect(jsonData).to.have.property(\"path\", \"/api/v1/users/-1\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{globalUrl}}users/{{incorrectUserId}}",
					"host": [
						"{{globalUrl}}users"
					],
					"path": [
						"{{incorrectUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "getUserByIdWithoutProblem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains user fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"id\", 1);\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"surname\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"\r",
							"    pm.expect(jsonData.name).to.eql(null);\r",
							"    pm.expect(jsonData.surname).to.eql(null);\r",
							"    pm.expect(jsonData.email).to.eql(null);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{globalUrl}}users/{{correctUserId}}",
					"host": [
						"{{globalUrl}}users"
					],
					"path": [
						"{{correctUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "createUserWithoutProblems",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 201 created\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains top-level fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"id\", 1);\r",
							"    pm.expect(jsonData).to.have.property(\"content\", \"1\");\r",
							"    pm.expect(jsonData).to.have.property(\"sender\");\r",
							"    pm.expect(jsonData).to.have.property(\"receiver\");\r",
							"});\r",
							"\r",
							"pm.test(\"Sender object is correct\", function () {\r",
							"    const sender = pm.response.json().sender;\r",
							"\r",
							"    pm.expect(sender).to.have.property(\"id\", 1);\r",
							"    pm.expect(sender).to.have.property(\"name\", null);\r",
							"    pm.expect(sender).to.have.property(\"surname\", null);\r",
							"    pm.expect(sender).to.have.property(\"email\", null);\r",
							"});\r",
							"\r",
							"pm.test(\"Receiver object is correct\", function () {\r",
							"    const receiver = pm.response.json().receiver;\r",
							"\r",
							"    pm.expect(receiver).to.have.property(\"id\", 2);\r",
							"    pm.expect(receiver).to.have.property(\"name\", null);\r",
							"    pm.expect(receiver).to.have.property(\"surname\", null);\r",
							"    pm.expect(receiver).to.have.property(\"email\", null);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"content\": \"1\",\r\n  \"senderId\": 1,\r\n  \"receiverId\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{globalUrl}}messages/create",
					"host": [
						"{{globalUrl}}messages"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "createUserWithBodyProblem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400 Bad Request\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is text/plain\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(contentType).to.include(\"text/plain\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains all validation error messages\", function () {\r",
							"    const body = pm.response.text();\r",
							"\r",
							"    pm.expect(body).to.include(\"Validation errors occurred\");\r",
							"    pm.expect(body).to.include(\"Sender ID must not be null\");\r",
							"    pm.expect(body).to.include(\"Content must not be blank\");\r",
							"    pm.expect(body).to.include(\"Receiver ID must not be null\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"content\": \"\",\r\n  \"senderId\": \"\",\r\n  \"receiverId\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{globalUrl}}messages/create",
					"host": [
						"{{globalUrl}}messages"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"value": "",
			"type": "string"
		}
	]
}